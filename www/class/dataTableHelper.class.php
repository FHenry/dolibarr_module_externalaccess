<?php

class DataTableAjaxHelper {


	/**
	 * @var DataTable_TableDef $table
	 */
	public $table;

	/**
	 * @var string $language
	 */
	public $language = 'french';

	/**
	 * @var DataTable_ColDef[]
	 */
	public $cols;

	/**
	 * @var Translate
	 */
	public $outputlangs;

	/**
	 * DataTableHelper constructor.
	 *
	 * @param $tableId
	 * @param Translate $outputlangs
	 */
	public function __construct($tableId, $outputlangs){
		$this->table = new DataTable_TableDef ($tableId);
		$this->jsdef = new DataTable_Def($this->language);

		$this->outputlangs = $outputlangs;
	}


	public function setDataSourceUrl($dataSourceUrl){
		$this->jsdef->ajax = $dataSourceUrl;
	}


	/**
	 * Generate html output including table and js
	 */
	public function renderHtmlOutput () {

		$out = $this->generateHtmlTable ();
		$out.= $this->generateJsPart ();

		return $out;
	}


	/**
	 * Generate table
	 */
	public function generateJsPart () {

		$this->jsdef->aoColumns = array();
		foreach ($this->cols as $colKey => $col){
//			$this->jsdef->columns[] = array('data' => $colKey);

			// for server side processing see https://legacy.datatables.net/release-datatables/examples/data_sources/server_side.html
			// to add ajax custom vars to interface https://legacy.datatables.net/release-datatables/examples/server_side/custom_vars.html

			//  see https://legacy.datatables.net/usage/columns
			$columnDefs = new stdClass();
			$columnDefs->bSortable = $col->orderable;
			$columnDefs->bSearchable = $col->searchable;
			$columnDefs->sName = $colKey;
			$columnDefs->sTitle = $this->outputlangs->transnoentitiesnoconv($col->label);


			if(!empty($col->class)){
				// Class to give to each cell in this column
				$columnDefs->sClass =  $col->class;
			}

			$this->jsdef->aoColumns[] = $columnDefs;
		}

		$out = '
	<script type="text/javascript" >
     	$(document).ready(function(){
         	$("#'.$this->table->id.'").DataTable('.json_encode($this->jsdef).');
        });
	</script>';

		return $out;
	}

	/**
	 * Generate table
	 */
	public function generateHtmlTable () {
		$titleRow = $this->generateTitleRow();

		$out = '
	<!-- Generated by DataTableHelper -->
	<table id="'.$this->table->id.'" class="'.$this->table->class.'" >
        <thead>
            '.$titleRow.'
        </thead>
        <tfoot>
            '.$titleRow.'
        </tfoot>
    </table>';

		return $out;
	}

	/**
	 * Generate an output row formated as an object
	 */
	public function formatRow() {

	}


	public function generateTitleRow(){

		$out = '<tr>';

		foreach ($this->cols as $col){
			$out.= '<th>'.$this->outputlangs->trans($col->label).'</th>';
		}
		$out.= '</tr>';

		return $out;
	}



	/**
	 *  uasort callback function to Sort columns fields
	 *
	 *  @param	array			$a    			PDF lines array fields configs
	 *  @param	array			$b    			PDF lines array fields configs
	 *  @return	int								Return compare result
	 */
	public function columnSort($a, $b)
	{
		if (empty($a->rank)) {
			$a->rank = 0;
		}
		if (empty($b->rank)) {
			$b->rank = 0;
		}
		if ($a->rank == $b->rank) {
			return 0;
		}
		return ($a->rank > $b->rank) ? -1 : 1;
	}

	/**
	 *   	Sort col def
	 *
	 *      @return	null
	 */
	public function sortColDef()
	{
		// Sorting
		uasort($this->cols, array($this, 'columnSort'));
	}

	/**
	 *  get column status from column key
	 *
	 *  @param	string			$colKey    		the column key
	 *  @return	float      width in mm
	 */
	public function getColumnStatus($colKey)
	{
		if (!empty($this->cols[$colKey]->status)) {
			return true;
		} else {
			return  false;
		}
	}

	/**
	 *   	get column position rank from column key
	 *
	 *   	@param	string		$colKey    		the column key
	 *      @return	int         rank on success and -1 on error
	 */
	public function getColumnRank($colKey)
	{
		if (!isset($this->cols[$colKey]->rank)) {
			return -1;
		}
		return  $this->cols[$colKey]->rank;
	}

	/**
	 *  get column position rank from column key
	 *
	 *  @param	string           $newColKey         the new column key
	 *  @param	DataTable_ColDef $newColDef         a single column definition object
	 *  @param	string           $targetCol         target column used to place the new column beside
	 *  @param	bool             $insertAfterTarget insert before or after target column ?
	 *  @return	int         new rank on success and -1 on error
	 */
	public function insertNewColumnDef($newColKey, $newColDef, $targetCol = false, $insertAfterTarget = false)
	{
		// prepare wanted rank
		$rank = -1;

		// try to get rank from target column
		if (!empty($targetCol)) {
			$rank = $this->getColumnRank($targetCol);
			if ($rank >= 0 && $insertAfterTarget) {
				$rank++;
			}
		}

		// get rank from new column definition
		if ($rank < 0 && !empty($newColDef->rank)) {
			$rank = $newColDef->rank;
		}

		// error: no rank
		if ($rank < 0) {
			return -1;
		}

		foreach ($this->cols as $colKey => & $colDef) {
			if ($rank <= $colDef->rank) {
				$colDef->rank = $colDef->rank + 1;
			}
		}

		$newColDef->rank = $rank;
		$this->cols[$newColKey] = $newColDef; // array_replace is used to preserve keys

		$this->sortColDef();

		return $rank;
	}

}

class DataTable_TableDef {

	/**
	 * required : the dom id of table
	 * @var
	 */
	public $id;

	/**
	 * @var string $class
	 */
	public $class = "table table-striped";

	public function __construct($id){
		$this->id = $id;
	}
}



/** Class utiliser pour la definition dans les IDE */
class DataTable_ColDef {
	/** @var int */
	public $rank = 0;

	public $label = '';


	/**
	 * Class to give to each cell in this column
	 * @var string
	 */
	public $class = '';

	/**
	 * Enable or disable sorting on this column.
	 * @var bool
	 */
	public $orderable = false;

	/**
	 * Enable or disable filtering on the data in this column.
	 * note : can be useless in ajax call context
	 * @var bool
	 */
	public $searchable = false;

	/**
	 * @var boolean
	 */
	public $status = true;

}

/** cette class sera jsonencode pour le js
 * Voir la dÃ©finition dans la documentation de de dataTable
 */
class DataTable_Def {


	/** @var object */
	public $language;

	/** @var string[]  */
	public $supportedLanguage = array(
		'french'
	);

	/**
	 * @var bool
	 */
	public $responsive = true;


	/**
	 * the ajax url
	 * @var bool | string
	 */
	public $ajax = false;


	public function __construct($language = 'french'){

		$context = Context::getInstance();


		if(!in_array($language, $this->supportedLanguage)){
			$language = 'french';
		}

		$this->language = new stdClass();
		$this->language->url = $context->getRootUrl().'vendor/data-tables/'.$language.'.json';
	}
}
